La clase "List" hereda a "MyList"
TESTS
_______________________________________________

``MyList`` puede ser instanciada sin argumentos, lo que retornará una lista vacía:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Con un solo argumento, lo que será un objeto iterable.

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


Un ``TypeError`` será raised por cada uno de los argumentos instanciados.

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)
Uso
______________________________________________________________________________________

``MyList`` es una clase heredada de ``list`` class, 
::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

Reemplazado con indexing:

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

Y removido con el método "remove"

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

``print_sorted`` Method
=======================


``MyList`` implementa un método único: un método de instancia pública
``print_sorted(self)``.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>


El método no acepta argumentos: se generará un error de tipo si se introduce un argumento.
proporcionó.

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given


El método imprime la lista en orden ascendente.

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

::

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

El orden de la lista original no se modifica después de una llamada al método.

::

    >>> print(my_list)
    [1, 4, 2, 3, 5]

Tenga en cuenta que las listas de cadenas están ordenadas lexográficamente.

::

    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

::

    >>> my_list.print_sorted()
    ['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']


Nada que ordenar con listas vacías.


::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

